"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77049],{3905:function(e,t,n){n.d(t,{kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),p=r,h=u["".concat(l,".").concat(p)]||u[p]||c[p]||s;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<s;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66229:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return c},default:function(){return u}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=["components"],o={},l="Game",m={unversionedId:"tutorials/game",id:"tutorials/game",isDocsHomePage:!1,title:"Game",description:"Game is a runtime of game. Through the methods on the Game instance, the game is controlled to pause and continue. By adding the System to the Game, the game can support different abilities, which are displayed by adding components to the GameObject.",source:"@site/docs/tutorials/game.md",sourceDirName:"tutorials",slug:"/tutorials/game",permalink:"/docs/tutorials/game",editUrl:"https://github.com/eva-engine/eva-engine.github.io/tree/master/docs/tutorials/game.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Resource Management",permalink:"/docs/tutorials/resourceManagement"},next:{title:"GameObject",permalink:"/docs/tutorials/gameObject"}},c=[{value:"Create a game",id:"create-a-game",children:[],level:2},{value:"Add system",id:"add-system",children:[],level:2},{value:"Get system",id:"get-system",children:[],level:2},{value:"Start the game",id:"start-the-game",children:[],level:2},{value:"Pause the game",id:"pause-the-game",children:[],level:2},{value:"Multi-scene management",id:"multi-scene-management",children:[{value:"Switch scene",id:"switch-scene",children:[],level:3},{value:"Render to multiple canvases",id:"render-to-multiple-canvases",children:[],level:3}],level:2},{value:"Ticker",id:"ticker",children:[{value:"add function in per frame",id:"add-function-in-per-frame",children:[],level:3},{value:"\u4fee\u6539\u6e38\u620f\u64ad\u653e\u901f\u5ea6",id:"\u4fee\u6539\u6e38\u620f\u64ad\u653e\u901f\u5ea6",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"game"},"Game"),(0,s.kt)("p",null,"Game is a runtime of game. Through the methods on the Game instance, the game is controlled to pause and continue. By adding the System to the Game, the game can support different abilities, which are displayed by adding components to the GameObject."),(0,s.kt)("h2",{id:"create-a-game"},"Create a game"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<style>\n  #canvas {\n    width: 100%;\n    height: auto;\n  }\n</style>\n<canvas id="canvas"></canvas>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import {Game} from '@eva/eva.js'\nimport {RendererSystem} from '@eva/plugin-renderer'\n\n// Create a rendering system\nconst rendererSystem = new RendererSystem({\n  canvas: document.querySelector('#canvas'), // Optional, automatically generate canvas and hang on game.canvas\n  width: 750, // required\n  height: 1000, // required\n  transparent: false, // optional\n  resolution: window.devicePixelRatio / 2, // Optional, if it is 2 times the image design, it can be divided by 2\n  enableScroll: true, // Enable page scrolling\n  renderType: 0 // 0: automatic judgment, 1: WebGL, 2: Canvas, it is recommended to use Canvas below android6.1 ios9, business judgment is required.\n})\n\n// Initialize the game\nconst game = new Game({\n  frameRate: 60, // optional\n  autoStart: true, // optional\n  systems: [rendererSystem]\n})\n")),(0,s.kt)("h2",{id:"add-system"},"Add system"),(0,s.kt)("p",null,"There are two ways to add a system. One is to pass in the ",(0,s.kt)("inlineCode",{parentName:"p"},"systems")," parameter of the constructor when the Game is instantiated. For example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"rendererSystem")," rendering capability is necessary and can be added in this way. The other is to call the ",(0,s.kt)("inlineCode",{parentName:"p"},"addSystem")," method on the game instance after the game is created. Eva.js provides many systems. These systems are used as plug-ins in a package. For example, if we want to detect the frame rate, we can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"@eva/plugin-stats")," plug-in."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import {StatsSystem} from '@eva/plugin-stats'\n\nconst statsSystem = new StatsSystem({\n  show: true, // Set here whether to display the fps panel\n  style: {\n    x: 0, // The values \u200b\u200bhere are all percentages of the screen width, unit vw\n    y: 50,\n    width: 20,\n    height: 12\n  }\n})\n\ngame.addSystem(statsSystem)\n")),(0,s.kt)("h2",{id:"get-system"},"Get system"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {StatsSystem} from '@eva/plugin-stats'\n\nconst stats = game.getSystem(StatsSystem) // Get system through class\n// or\nconst stats = game.getSystem('StatsSystem') // Get system by system name\n")),(0,s.kt)("h2",{id:"start-the-game"},"Start the game"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"game.start()\n")),(0,s.kt)("h2",{id:"pause-the-game"},"Pause the game"),(0,s.kt)("p",null,"It is recommended to pause the game when the app exits to the background and start after returning"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"game.pause()\n")),(0,s.kt)("h2",{id:"multi-scene-management"},"Multi-scene management"),(0,s.kt)("h3",{id:"switch-scene"},"Switch scene"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import {Scene} from '@eva/eva.js'\n\nconst scene = new Scene('bg')\n\ngame.loadScene({\n  scene,\n  mode: LOAD_SCENE_MODE.SINGLE\n})\n")),(0,s.kt)("h3",{id:"render-to-multiple-canvases"},"Render to multiple canvases"),(0,s.kt)("p",null,"In the project, the game will be rendered on a default canvas by default. When we need to render on multiple canvases, we can render the scene on another canvas."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import {Scene, LOAD_SCENE_MODE} from '@eva/eva.js'\n\nconst scene = new Scene('bg')\n\ngame.loadScene({\n  scene,\n  mode: LOAD_SCENE_MODE.MULTI_CANVAS,\n  params: {\n    // This is the same as the RendererSystem parameter\n    canvas: document.querySelector('#canvas'), //Optional, automatically generate canvas and hang on game.canvas\n    width: 750, //Required\n    height: 1000, // required\n    transparent: false, // optional\n    resolution: window.devicePixelRatio / 2, // Optional, if it is 2 times the image design, it can be divided by 2\n    enableScroll: true, // Enable page scrolling\n    renderType: 0\n    // 0: automatic judgment, 1: WebGL, 2: Canvas, it is recommended to use Canvas under android6.1 ios9, business judgment is required.\n  }\n})\n")),(0,s.kt)("h2",{id:"ticker"},"Ticker"),(0,s.kt)("h3",{id:"add-function-in-per-frame"},"add function in per frame"),(0,s.kt)("p",null,"It is recommended that the ",(0,s.kt)("inlineCode",{parentName:"p"},"update")," method in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Component")," add the function to be executed per frame, or you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"add")," method, which will be executed after the lateUpdate of all systems is executed"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"game.ticker.add((e: UpdateParams)=>{\n\n})\n")),(0,s.kt)("h3",{id:"\u4fee\u6539\u6e38\u620f\u64ad\u653e\u901f\u5ea6"},"\u4fee\u6539\u6e38\u620f\u64ad\u653e\u901f\u5ea6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"game.ticker.setPlaybackRate(1.5) // 1.5\u500d\u901f\u64ad\u653e\n")))}u.isMDXComponent=!0}}]);